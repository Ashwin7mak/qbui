//
//  MOVE TO Root project FOLDER ONCE gradle-grunt-plugin IS UPDATED TO ALLOW
//  FOR GruntFile.js to be located in a folder other than where the gradle
//  build script is located.
//
//  Next rev of gradle-grunt plugin should include this new functionality
//

description = "Package for Node.js application and UI files"

//******************************************************
// declare the plugins we are going to use
//******************************************************
apply plugin: 'com.moowork.grunt'
apply plugin: 'com.moowork.node'
apply plugin: 'org.sonarqube'
apply plugin: 'sonarBuildBreak'
apply plugin: 'com.bmuschko.cargo'
apply plugin: 'maven'

//grab the current working directory to use later on
def cwd = project.getProjectDir().absolutePath
//******************************************************
//  Build dependencies...local
//******************************************************
buildscript {
    ext {
        nexusGroupRoot = "https://nexus1.ci.quickbaserocks.com/nexus/content/groups/"
        nexusRepoRoot = "https://nexus1.ci.quickbaserocks.com/nexus/content/repositories/"
        nexusUser = "developer"
        nexusPassword = "id2ubV8miEVhXtGd"
        quickbaseVersion = "1.0"
    }
    repositories {
        maven {
            url nexusGroupRoot + "public/"
        }

        flatDir name: 'ExternalJars', dirs: '../lib/plugins'
        dependencies {
            classpath 'com.moowork.gradle:gradle-grunt-plugin:0.9'
            classpath 'com.moowork.gradle:gradle-node-plugin:0.9'
            classpath 'com.bmuschko:gradle-cargo-plugin:2.2.1'
            classpath 'org.sonarqube.gradle:gradle-sonarqube-plugin:1.1'
            classpath 'com.quickbase.gradle:sonar-buildbreak-plugin:1.0.+'
        }
    }
}

dependencies {
    def cargoVersion = '1.4.5'
    cargo "org.codehaus.cargo:cargo-core-uberjar:$cargoVersion",
            "org.codehaus.cargo:cargo-ant:$cargoVersion",
            "commons-discovery:commons-discovery:0.5",
            "commons-logging:commons-logging:1.1.3",
            "dom4j:dom4j:1.6.1",
            "jaxen:jaxen:1.1.6"
}

def environment = System.getProperty("env");
def awsEnv = (environment == "aws");

def testURL = "http://quickbase-dev.com:8080/api";
if(System.getProperty("endpoint")) {
    testURL = System.getProperty("endpoint");
}

// Setup Sauce Connection information for try job
def instanceId = System.getenv("INSTANCE_ID");
def executorId = System.getenv("EXECUTOR_NUMBER");
//def sauceURL = "https://localhost."+ instanceId + "-" + executorId + ".slave.ci.quickbaserocks.com";
def sauceURL = "http://quickbase-dev.com:9000/api";
def sauceKey = System.getenv("SAUCE_KEY");
def sauceJobName = "JENKINS_UI_E2E_" + System.getenv("BUILD_NUMBER");
def sauceProdJobName = "JENKINS_UI_E2E_PROD_SMOKETEST" + System.getenv("BUILD_NUMBER");
def tunnelIdentifier = "JENKINS_TUNNEL_E2E_" + System.getenv("BUILD_NUMBER");

//  CI Builds need the following properties to properly package and archive the build artifacts
println("CI Build: " + isCIBuild() )
if (isCIBuild()) {
    rootProject.ext.allServicePrefix = getServicePrefix() + "_"
    rootProject.ext.CISystemUser = getCiSystemUser()
    rootProject.ext.releasePrefix = getReleasePrefix();
}

println("cwd " + cwd )

node {
    // Version of node to use.
    version = '6.9.5'

    npmVersion = '3.10.10'
    // Base URL for fetching node distributions (change if you have a mirror).
    distBaseUrl = 'http://nodejs.org/dist'

    // Download node if running a CI build; otherwise use globally installed node.
    download = isCIBuild()

    // Set the work directory for unpacking node...can't be under build directory as the clean task will wipe out the directory
    workDir = file("$projectDir/nodejs")
}

//******************************************************
//  Gradle tasks
//******************************************************

task clean_dist_node_modules(type: Delete) {
    delete 'dist/node_modules'
}


task delete_node_modules(type: Delete) {
    delete 'node_modules'
}

npm_install {
    args = ['--verbose']
}

task npmCacheClean (type: NpmTask) {
    args = ["cache", "clean", "--verbose"]
}
task npmInstallVerbose(type: NpmTask) {
    args = ['install', '--verbose', '--debug' ]
}

task npmInstallLean(type: NpmTask) {
    doFirst {
        tasks.npmInstallGruntProtractorRunner.execute();
    }
    args = ['install']
}

task npmInstallGruntProtractorRunner(type: NpmTask) {
    args = ['install', 'grunt-protractor-runner', '--registry', 'https://registry.npmjs.org/']
}

task npmListConfig(type: NpmTask) {
    args = ['config', 'ls', '-l' ]
}

task npmPrune(type: NpmTask) {
    args = ['prune']
}

task npmPruneProduction (type: NpmTask) {
    args = ['prune', '--production']
    execOverrides {
        it.workingDir = cwd + "/dist"
    }
}

task npmUpdateWebdriver(type: NpmTask) {
    args = ['run', 'update-webdriver']
}

task npmRunLint(type: NpmTask) {
    args = ['run', 'lint']
}

task npmInstallProduction (type: NpmTask) {
    args = ['install', '--production']
    execOverrides {
        it.workingDir = cwd + "/dist"
    }
}

task dumpSys {
    doLast {
        println "System Properties:"
        System.properties.each {
            println "   $it"
        }
    }
}

task dumpProj {
    doLast {
        println "Project Properties:"
        project.properties.each { key, value ->
            if (!key.equals("plugins") && !key.equals("tasks") && !key.equals("properties"))
                println "   $key=$value"
        }
    }
}

task dumpPlugins{
    doLast {
        println "Plugin Properties:"
        project.plugins.each {
            println "    plugin: $it"
            it.properties.each {
                println "       $it"
            }
        }
    }
}

task dumpEnv {
    doLast {
        dumpSys
        dumpProj
        dumpPlugins
    }
}

task npmRebuildJpegtran (type: NpmTask) {
    args =['rebuild', 'jpegtran-bin']
}

task npmRebuildNodeSass (type: NpmTask) {
    args =['rebuild', 'node-sass']
}

task npmInstallReactRouter (type: NpmTask) {
    args = [ 'install', 'react-router@1.0.0-rc3']
}

task npmRmJpegtran (type: NpmTask) {
    args = ['rm', 'jpegtran-bin']
}

task npmInstallJpegtran (type: NpmTask) {
    args = [ 'install', 'jpegtran-bin@0.1.0']
}

task gruntBuildDebugVerbose(type: GruntTask) {
    args = ["build",  "--no-color", "--debug", "--verbose", "--stacktrace"]
}

task gruntTestDebugVerbose(type: GruntTask) {
    args = ["ciTest", "--no-color", "--debug", "--verbose", "--stacktrace"]
}

task gruntSassDebugVerbose(type: GruntTask) {
    args = ["sass", "--debug", "--verbose", "--no-color"]
}

task gruntBuildNoColor(type: GruntTask) {
    args = ["build", "--no-color"]
}

task gruntUnitTestsNoColor(type: GruntTask) {
    args = ["ciTest", "--no-color"]
}

task invokeInstallSauceLabs(type:Exec) {
    executable cwd + "/../tools/aws/jenkins_install_sauce.sh"
}

task invokeCheckForApiUp(type:Exec) {
    executable cwd + "/../tools/ci/checkForApiUp.sh"
    args '60', testURL
}

task invokeCheckForNodeUp(type:Exec) {
    executable cwd + "/../tools/ci/checkForApiUp.sh"
    args '60', sauceURL
}

task checkForApiUp() {
    doFirst {
        tasks.invokeCheckForApiUp.execute()
    }
}

task integrationTestsNoColor(type: GruntTask) {
    args = ["ciIntegration", "--no-color"]
}

task integrationTestsCoverageNoColor(type: GruntTask) {
    doFirst {
        tasks.invokeCheckForApiUp.execute()
        args = ["ciIntegrationCoverage", "--no-color"]
    }
}

//browser tests not yet supported on ci
task gruntCiE2ETestsNoColor(type: GruntTask) {
    doFirst {
        tasks.invokeCheckForApiUp.execute()
        args = ["test:e2e", "--no-color"]
    }
}

//browser tests in AWS running in sauce labs against a candidate build
task gruntE2EAWSSauce(type: GruntTask) {
    doFirst {
        tasks.invokeInstallSauceLabs.execute()
        args = ["test:e2eAWSSauce", "--sauceKey", sauceKey, "--sauceJobName", sauceJobName, "--tunnelIdentifier", tunnelIdentifier]
    }
}

//browser tests in AWS that run on Sauce labs against production
task gruntE2EProdSauce(type: GruntTask) {
    doFirst {
        tasks.invokeInstallSauceLabs.execute()
        args = ["test:e2eProdSauce", "--sauceKey", sauceKey, "--sauceJobName", sauceProdJobName, "--tunnelIdentifier", tunnelIdentifier]
    }
}

task cleanBuildDir (type: Delete) {
    delete 'build'
}

task deleteDistModules(type: Delete) {
    delete "dist/node_modules"
}

task installExpress(type: NpmTask) {
    // install the express package only
    args = ['install', 'express', '--save-dev']
}

task zip(type: Zip) {
    def branchName;
    if (System.getProperty("GIT_BRANCH") != null) {
        branchName = System.getProperty("GIT_BRANCH")
    } else if (System.getenv("GIT_BRANCH") != null) {
        branchName = System.getenv("GIT_BRANCH")
    } else {
        // indicate the branch is associated with an individual user
        branchName = "user"
    }

    branchName = branchName.replaceAll("origin\\/", "");
    if (!branchName.equals("master")) {
        project.version = project.version + "-SNAPSHOT"
    }

    project.ext.zipArchiveName = project.name + "-" + project.version + ".zip"
    destinationDir = file("$buildDir/distributions/")
    zip64 = true

    from ('dist') {
        into('dist')
    }
}

//******************************************************
//  Define task dependencies
//******************************************************
zip.dependsOn clean, npmInstallProduction
build.dependsOn clean, grunt_build
clean.dependsOn grunt_clean, cleanBuildDir
test.dependsOn clean, gruntUnitTestsNoColor
npmInstallProduction.dependsOn grunt_build, dumpSys

artifacts {
    archives file: file("build/distributions/" + project.ext.zipArchiveName),
            name: "service",
            type: "zip",
            builtBy: zip
}


uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: project.ext.nexusRepoRoot + "continuous-releases/") {
                authentication(userName: project.ext.nexusUser, password: project.ext.nexusPassword)
            }
            snapshotRepository(url: project.ext.nexusRepoRoot + "continuous-snapshots/") {
                authentication(userName: project.ext.nexusUser, password: project.ext.nexusPassword)
            }

            addFilter('service') {artifact, file ->
                artifact.name == 'service'
            }

            pom('service').groupId = project.group
            pom('service').artifactId = project.name
            pom('service').version = project.version
        }
    }
}

//******************************************************
// Sonar task that performs coverage and analysis of the ui project
//******************************************************
sonarqube {
    //Resolve the executing user's name
    def user = System.getProperty("user.name")
    //Resolve the branch name
    def proc = "git rev-parse --abbrev-ref HEAD".execute()
    proc.waitFor()
    def branchName = proc.in.text.replace("\n", "").replace("\r", "").trim()
    println 'branchName:' + branchName;

    properties {
        // the user name becomes part of the project key, this way Jenkins builds are separated from the commoners, meaning you...
        property "sonar.projectKey", "ui:${branchName}:${user}"
        property "sonar.projectVersion", "0.1"
        property "sonar.projectName", "${user}:ui:${branchName}"
        property "sonar.qualitygate", "Sonar%20way%20with%20Findbugs%20-%20reactjs"
        property "sonar.host.url", "https://sonar1.ci.quickbaserocks.com/"
        property "sonar.login", "quickbase"
        property "sonar.password", "blue"
        property "sonar.sources", "."
        property "sonar.modules", "client-react,server"
        property "sonar.coverage.exclusions", "**/*.spec.js"
        property "client-react.sonar.projectName", "${user}:ui:${branchName}:client"
        property "client-react.sonar.sources", "${projectDir}/client-react/src"
        property "client-react.sonar.exclusions", "**/assets/**,**/components/node/**,**/constants/**,**/locales/bundles/**,**/mocks/**"

        //  import the ui LCOV coverage report
        property "client-react.sonar.javascript.lcov.reportPath","${projectDir}/build/reports/client/coverage/lcov.info"

        property "server.sonar.projectName", "${user}:ui:${branchName}:server"
        property "server.sonar.sources", "${projectDir}/server,${projectDir}/common"
        property "server.sonar.exclusions", "**/test/**,**/config/environment/**,**/mockserver/**"
        //  import the ui LCOV coverage report
        property "server.sonar.javascript.lcov.reportPath","${projectDir}/build/reports/server/coverage/lcov.info"

        // Can be added back in for debugging purposes
        //property "sonar.verbose", "true"
    }
}

//******************************************************
//  Supporting Groovy functions
//******************************************************
def getRpmVersion() {
    return "1.0"
}
def getServicePrefix() {
    return "phoenix"
}
def getCiSystemUser() {
    return "jenkins"
}

def getReleasePrefix() {
    def prefix = getServicePrefix()
    def ciUser = getCiSystemUser()
    def user = System.getProperty("user.name");

    //dev builds get user info for rpm war etc
    if (!user.equals(ciUser) && isReleaseSnapshot()) {
        prefix += "_${user}"
    }
    return prefix
}

def getRelease() {
    return System.getProperty("releaseNumber", "SNAPSHOT")
}

def isReleaseSnapshot() {
    return getRelease().equals("SNAPSHOT")
}

def isCIBuild() {
    return getReleasePrefix().equals(getServicePrefix())
}

//  return the folder where the allServices war is located
def getAllServicesWar(cwd) {
    return "${cwd}/../../quickbase/allServices/build/libs/allServices-${getReleasePrefix()}_${getRpmVersion()}-${getRelease()}.war"
}

//  return the folder where the coherenceCommon resources are located
def getCommonCoherenceResources(cwd) {
    return "${cwd}/../../quickbase/coherenceCommon/src/main/resources"
}