---
AWSTemplateFormatVersion: '2010-09-09'
Description: QBUI ECS Deployment
Parameters:
  VPCStackName:
    Type: String
    Default: general-vpc
  Path:
    Type: String
    Default: "/*"
  SwimlaneID:
    Type: String
  Environment:
    Type: String
  ServiceName:
    Type: String
    Default: coreui
  DesiredCount:
    Type: String
    Default: 3
  ContainerPort:
    Type: String
    Default: 9443
  ContainerImage:
    Type: String
    Default: 717266932182.dkr.ecr.us-west-2.amazonaws.com/quickbase/ui:latest
  ContainerMemory:
    Type: String
    Default: 2048
  LegacyBase:
    Type: String
    Default: "NO_DEFAULT"
Mappings:
  # 3381 = pre-prod
  # 1063 = prod
  AccountMap:
    DomainName:
      "723670383381": "newstack.quickbaserocks.com"
      "729325871063": "newstack.quickbase.com"
      "717266932182": "newstack.quickbase.net"
      "956858433230": "newstack.quickbase.me"
    SecretsKmsKeyId:
      "723670383381": "79461a25-ffdc-4fbf-ac4f-febb847dcb9b"
      "729325871063": "7eb8ecf8-3894-4d3d-a3e4-74ed8b811c7e"
      "717266932182": "c66d258f-d4ec-4ba7-8e70-c9e977f8e56a"
      "956858433230": "2a2988f8-f5ca-4f1a-9778-e5cf0ccff4f0"

Resources:
  Service:
    Type: AWS::ECS::Service
    DependsOn: ListenerRule
    Properties:
      Cluster: !Sub ${SwimlaneID}-ecs
      Role: !Ref ServiceRole
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref TaskDefinition
      PlacementStrategies:
        - Field: attribute:ecs.availability-zone
          Type: spread
        - Field: instanceId
          Type: spread
      LoadBalancers:
        - ContainerName: !Ref ServiceName
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroup
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      TaskRoleArn: !GetAtt TaskRole.Arn
      ContainerDefinitions:
        - Name: !Ref ServiceName
          Essential: true
          Image: !Ref ContainerImage
          Memory: !Ref ContainerMemory
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          MountPoints:
            - SourceVolume: AppLogs
              ContainerPath: /var/log
          Environment:
            - Name: NODE_ENV
              Value: container
            - Name: javaHost
              Value: !Sub
                - "https://${SwimlaneID}-ecs.${DomainName}:443"
                - { SwimlaneID: !Ref SwimlaneID, DomainName: !FindInMap [AccountMap, "DomainName", !Ref "AWS::AccountId"] }
            - Name: eeHost
              Value: !Sub
                - "https://${SwimlaneID}-ecs.${DomainName}:443"
                - { SwimlaneID: !Ref SwimlaneID, DomainName: !FindInMap [AccountMap, "DomainName", !Ref "AWS::AccountId"] }
            - Name: legacyBase
              Value: !Ref LegacyBase
      Volumes:
        - Host:
            SourcePath: !Sub "/var/log/containers/${ServiceName}"
          Name: AppLogs
  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn:
        "Fn::ImportValue": !Sub "${SwimlaneID}-ecs-ALBListenerARN"
      Priority: 200
      Conditions:
        - Field: path-pattern
          Values:
            - !Ref Path
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId:
        "Fn::ImportValue": !Sub "${VPCStackName}-VPC"
      Port: 443
      Protocol: HTTPS
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /qbui/health
      HealthCheckProtocol: HTTPS
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ecs.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
      -
        PolicyName: alb-registration-policy
        PolicyDocument:
          Statement:
            -
              Effect: Allow
              Action:
                - ec2:AuthorizeSecurityGroupIngress
                - ec2:Describe*
                - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
                - elasticloadbalancing:Describe*
                - elasticloadbalancing:RegisterInstancesWithLoadBalancer
                - elasticloadbalancing:DeregisterTargets
                - elasticloadbalancing:DescribeTargetGroups
                - elasticloadbalancing:DescribeTargetHealth
                - elasticloadbalancing:RegisterTargets
              Resource: "*"
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ecs-tasks.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
      -
        PolicyName: parameter-store-policy
        PolicyDocument:
          Statement:
            -
              Effect: Allow
              Action:
                - ssm:DescribeParameters
              Resource: "*"
            -
              Effect: Allow
              Action:
                - ssm:GetParameters
              Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${SwimlaneID}-${Environment}-${ServiceName}-db.*"
            -
              Effect: Allow
              Action:
                - kms:Decrypt
              Resource: !Sub
                - arn:aws:kms:${Region}:${AID}:key/${SecretsKmsKeyId}
                - { Region: !Ref "AWS::Region", AID: !Ref "AWS::AccountId", SecretsKmsKeyId: !FindInMap [AccountMap, "SecretsKmsKeyId", !Ref "AWS::AccountId"] }
