{
  "Description": "CoreUI Deployment",
  "Parameters": {
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default": "development-preprod",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    },
    "paramServiceName": {
      "Description": "The name of the service being deployed",
      "Default": "CoreUI",
      "Type": "String"
    },
    "paramEnvironment": {
      "Description": "The environment name (prod, qual, int, etc)",
      "Type": "String",
      "AllowedValues": [
        "int",
        "qual",
        "prod"
      ]
    },
    "paramELBPort": {
      "Type": "Number",
      "Default": "443",
      "Description": "The port for ELB inbound access"
    },
    "paramInstancePort": {
      "Type": "Number",
      "Default": "9443",
      "Description": "The listening port of the instance"
    },
    "paramVPC": {
      "Description": "The VPC to use for instance",
      "Type": "String",
      "Default": "vpc-c16fefa4",
      "ConstraintDescription": "must be the id of an existing VPC"
    },
    "paramELBSubnets": {
      "Type": "CommaDelimitedList",
      "Default": "subnet-972af7ce, subnet-872e90f0",
      "Description": "Subnets for the ELB"
    },
    "paramInstanceSubnets": {
      "Type": "CommaDelimitedList",
      "Default": "subnet-9c2e90eb, subnet-952af7cc",
      "Description": "Subnets for the instances"
    },
    "paramServerCapacity": {
      "Default": 1,
      "Description": "The number of EC2 instances",
      "Type": "Number",
      "MinValue": "1",
      "MaxValue": "5",
      "ConstraintDescription": "must be between 1 and 5 EC2 instances"
    },
    "paramEC2ImageAMI": {
      "Type": "String",
      "Description": "The AMI to use"
    },
    "paramInstanceType": {
      "Description": "EC2 instance type",
      "Type": "String",
      "Default": "c4.large"
    },
    "paramBastionCIDRBlock": {
      "Description": "The IP address range of the bastion subnets.",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "10.82.144.64/26",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "paramDomainName": {
      "Description": "The root domain",
      "Type": "String",
      "Default": "newstack.quickbaserocks.com"
    },
    "paramSecretsKMSKey": {
      "Description": "The KMS Key ID for Secrets CLI",
      "Type": "String",
      "Default": "79461a25-ffdc-4fbf-ac4f-febb847dcb9b"
    },
    "paramConnectionDrainingTimeout": {
      "Description": "ELB Connection Draining Timeout in seconds",
      "Type": "String",
      "Default": "30"
    },
    "paramVPCCIDRBlock": {
      "Description": "The IP address range of the VPC",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "10.82.144.0/21",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "paramInternetAccessSecurityGroupID": {
      "Description": "The Security Group ID allowing select outbound Internet traffic",
      "Type": "String",
      "Default": "sg-f5264793"
    },
    "paramNatSecurityGroupID": {
      "Description": "The Security Group ID allowing traffic from our NAT EIPs",
      "Type": "String",
      "Default": "sg-4bdabc2d"
    }
  },
  "Resources": {
    "ElbSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable HTTP access to ELB",
        "VpcId": {"Ref": "paramVPC"},
        "SecurityGroupIngress": [
          {"IpProtocol": "tcp", "FromPort": {"Ref": "paramELBPort"}, "ToPort": {"Ref": "paramELBPort"}, "CidrIp": "0.0.0.0/0"}
        ]
      }
    },
    "ElasticLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "AccessLoggingPolicy": {
          "EmitInterval": 5,
          "Enabled": "true",
          "S3BucketName": {"Fn::Join": [ "-", ["quickbase-elb-logs", {"Ref": "AWS::AccountId"}, {"Ref": "AWS::Region"} ]]}
        },
        "LoadBalancerName": {"Ref": "AWS::StackName"},
        "CrossZone": "true",
        "Scheme": "internet-facing",
        "ConnectionDrainingPolicy": {
          "Enabled": "true",
          "Timeout": {"Ref": "paramConnectionDrainingTimeout"}
        },
        "SecurityGroups": [{"Ref": "ElbSecurityGroup"}, {"Ref": "paramNatSecurityGroupID"}],
        "Listeners": [
          {
            "LoadBalancerPort": {"Ref": "paramELBPort"},
            "InstancePort": {"Ref": "paramInstancePort"},
            "Protocol": "TCP"
          }
        ],
        "HealthCheck": {
          "Target": {"Fn::Join" : [ "", [ "HTTPS:", {"Ref": "paramInstancePort"}, "/webhooks/v1/health" ] ]},
          "HealthyThreshold": "2",
          "UnhealthyThreshold": "2",
          "Interval": "5",
          "Timeout": "2"
        },
        "Subnets": {"Ref": "paramELBSubnets"},
        "Tags": [
          {
            "Key": "Environment",
            "Value": {"Ref": "paramEnvironment"}
          },
          {
            "Key": "ServiceName",
            "Value": {"Ref": "paramServiceName"}
          }
        ]
      }
    },
    "InstanceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "SSH from Bastion on 22; web access from ELB",
        "VpcId": {"Ref": "paramVPC"},
        "SecurityGroupIngress": [
          {"IpProtocol": "tcp", "FromPort": "22",   "ToPort": "22",   "CidrIp": {"Ref": "paramBastionCIDRBlock"}},
          {"IpProtocol": "tcp", "FromPort": {"Ref": "paramInstancePort"}, "ToPort": {"Ref": "paramInstancePort"}, "SourceSecurityGroupId": {"Ref": "ElbSecurityGroup"}}
        ],
        "SecurityGroupEgress": [
          {"IpProtocol": "-1", "CidrIp": {"Ref": "paramVPCCIDRBlock"}}
        ]
      }
    },
    "LCLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": { "Fn::Join": ["-", [{"Ref": "AWS::StackName"}, "LCLambdaFunction"]]},
        "Code": {
          "ZipFile": { "Fn::Join": ["\n", [
            "from __future__ import print_function",
            "import json",
            "import boto3",
            "def handler(event, context):",
            "    print('Received event: ' + json.dumps(event, indent=2))",
            "    m = json.loads(event['Records'][0]['Sns']['Message'])",
            "    if(m.has_key('LifecycleTransition') and m['LifecycleTransition'] == 'autoscaling:EC2_INSTANCE_TERMINATING'):",
            "        print('Adding Instance: {0}'.format(m['EC2InstanceId']))",
            "        dynamodb = boto3.resource('dynamodb')",
            "        table = dynamodb.Table('LifeCycleControl')",
            "        table.put_item(Item={'InstanceID': m['EC2InstanceId'], 'token': m['LifecycleActionToken'], 'hook': m['LifecycleHookName'], 'asg': m['AutoScalingGroupName'], 'time': m['Time']})",
            "    else:",
            "        print('Event ignored')"
          ]]}
        },
        "Handler": "index.handler",
        "Role": { "Fn::GetAtt": [ "LambdaRole", "Arn" ] },
        "Runtime": "python2.7"
      }
    },
    "LambdaHistoryDelete": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": {  "Fn::Join": ["-", [{"Ref": "AWS::StackName"}, "LambdaHistoryDelete"]]},
        "Code": {
          "ZipFile": { "Fn::Join": ["", [
            "import urllib2\n",
            "import ssl\n",
            "import json\n",
            "def handler(event, context):\n",
            "    print('Received event: ' + json.dumps(event, indent=2))\n",
            "    server = '" , { "Fn::Join": ["", [{ "Ref": "AWS::StackName" }, "-" , {"Ref": "paramServiceName"}, "-", {"Ref": "paramEnvironment"}, "." , { "Ref": "paramDomainName" }]] } , "'\n",
            "    action = '/webhooks/v1/history'\n",
            "    url = 'https://' + server + action\n",
            "    print(url)\n",
            "    ctx = ssl.create_default_context()\n",
            "    ctx.check_hostname = False\n",
            "    ctx.verify_mode = ssl.CERT_NONE\n",
            "    response = None\n",
            "    r = urllib2.Request(url)\n",
            "    r.add_header('Content-Type', 'application/json')\n",
            "    r.get_method = lambda: 'DELETE'\n",
            "    try:\n",
            "        response = urllib2.urlopen(r, context=ctx).read()\n",
            "    except urllib2.HTTPError, error:\n",
            "        contents = error.read()\n",
            "        print(contents)\n",
            "                                     \n"
          ]]}
        },
        "Handler": "index.handler",
        "Role": { "Fn::GetAtt": [ "LambdaRole", "Arn" ] },
        "Runtime": "python2.7",
        "Timeout" : 30,
        "Description" : "Delete webhook event history older than 30 days"
      }
    },
    "LambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": { "Fn::GetAtt": [ "LCLambdaFunction", "Arn" ] },
        "Principal": "sns.amazonaws.com",
        "SourceArn": { "Ref": "SNSTopic" }
      }
    },
    "SNSTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Subscription": [{
          "Endpoint": { "Fn::GetAtt": [ "LCLambdaFunction", "Arn" ] },
          "Protocol": "lambda"
        }],
        "TopicName": { "Fn::Join": ["-", [{ "Ref": "AWS::StackName"}, "LCTopic" ]] }
      }
    },
    "LambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": { "Service": "lambda.amazonaws.com" },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "LambdaPolicy",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:PutItem"
                  ],
                  "Resource": { "Fn::Join": [":", ["arn:aws:dynamodb:us-west-2", {"Ref": "AWS::AccountId"}, "table/LifeCycleControl"]] }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                }
              ]
            }
          }
        ]
      }
    },
    "LCRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": { "Service": "autoscaling.amazonaws.com" },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "LCPolicy",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "sns:Publish"
                  ],
                  "Resource": { "Ref": "SNSTopic" }
                }
              ]
            }
          }
        ]
      }
    },
    "LifecycleHook": {
      "Type": "AWS::AutoScaling::LifecycleHook",
      "Properties": {
        "AutoScalingGroupName": { "Ref": "AutoScalingGroup" },
        "LifecycleTransition": "autoscaling:EC2_INSTANCE_TERMINATING",
        "NotificationTargetARN": { "Ref": "SNSTopic" },
        "RoleARN": { "Fn::GetAtt": [ "LCRole", "Arn" ] }
      }
    },
    "ScheduledHistoryDeleteRule": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "Scheduled job to delete the history",
        "ScheduleExpression": "cron(0 7 * * ? *)",
        "State": "ENABLED",
        "Targets": [{
          "Arn": { "Fn::GetAtt": ["LambdaHistoryDelete", "Arn"] },
          "Id": "LambdaHistoryDeleteV1"
        }]
      }
    },
    "PermissionForEventsToInvokeLambda": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": { "Ref": "LambdaHistoryDelete" },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": { "Fn::GetAtt": ["ScheduledHistoryDeleteRule", "Arn"] }
      }
    },
    "InstanceProfile" : {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [ { "Ref": "InstanceRole" } ]
      }
    },
    "InstanceRole" : {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {
              "Service": [ "ec2.amazonaws.com" ]
            },
            "Action": [ "sts:AssumeRole" ]
          } ]
        },
        "Path": "/",
        "Policies" : [
          {
            "PolicyName": "describe-instance-health-policy",
            "PolicyDocument": {
              "Statement": [{
                "Effect": "Allow",
                "Action": [ "elasticloadbalancing:DescribeInstanceHealth" ],
                "Resource": "*"
              }]
            }
          },
          {
            "PolicyName": "secrets-cli-access-policy",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:ListBucket",
                    "s3:ListBucketVersions",
                    "s3:Get*"
                  ],
                  "Resource": [
                    {"Fn::Join": ["", ["arn:aws:s3:::iss-", {"Ref": "AWS::AccountId"}, "-", {"Ref": "AWS::Region"}, "/*"]]},
                    {"Fn::Join": ["", ["arn:aws:s3:::iss-", {"Ref": "AWS::AccountId"}, "-", {"Ref": "AWS::Region"}]]}
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "kms:Decrypt",
                    "kms:Encrypt",
                    "kms:ReEncrypt",
                    "kms:GenerateDataKey",
                    "kms:GenerateDataKeyWithoutPlaintext",
                    "kms:CreateGrant",
                    "kms:ListGrants",
                    "kms:RevokeGrant",
                    "kms:DescribeKey"
                  ],
                  "Resource": {"Fn::Join": ["", ["arn:aws:kms:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":key/", {"Ref": "paramSecretsKMSKey"}]]}
                }
              ]
            }
          },
          {
            "PolicyName": "lifecycle-script-policy",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:GetItem",
                    "dynamodb:DeleteItem",
                    "dynamodb:GetRecords",
                    "dynamodb:Query",
                    "dynamodb:Scan"
                  ],
                  "Resource": { "Fn::Join": [":", ["arn:aws:dynamodb:us-west-2", {"Ref": "AWS::AccountId"}, "table/LifeCycleControl"]] }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "autoscaling:CompleteLifecycleAction"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "AutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "LaunchConfigurationName": {"Ref": "LaunchConfig"},
        "MinSize": "1",
        "MaxSize": "5",
        "DesiredCapacity": {"Ref": "paramServerCapacity"},
        "LoadBalancerNames": [{"Ref": "ElasticLoadBalancer"}],
        "VPCZoneIdentifier": {"Ref": "paramInstanceSubnets"},
        "HealthCheckType": "ELB",
        "HealthCheckGracePeriod": 600,
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Ref": "AWS::StackName"},
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "Environment",
            "Value": {"Ref": "paramEnvironment"},
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "ServiceName",
            "Value": {"Ref": "paramServiceName"},
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "HostingProvider",
            "Value": "AWS",
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "Location",
            "Value": {"Ref": "AWS::Region"},
            "PropagateAtLaunch": "true"
          }
        ]
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT10M"
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": "1",
          "MaxBatchSize": "1",
          "PauseTime": "PT10M",
          "WaitOnResourceSignals": "true"
        }
      }
    },
    "LaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "default": [ "run_chef", "setup_environment_variable", "get_secrets", "install_lc_handler", "verify_instance_health" ]
          },
          "run_chef": {
            "files": {
              "/dev/shm/chef-attributes-int.json": {
                "content": {
                  "splunk": {
                    "forwarder": {
                      "index": "quickbase-ppdidx",
                      "logs_to_index": {
                        "default": {
                          "_meta": { "Fn::Join": ["", ["aws_stack_name::", {"Ref": "AWS::StackName"} ]] }
                        },
                        "monitor:///opt/tomcat/logs": {
                          "disabled": "0",
                          "index": "quickbase-ppdidx",
                          "blacklist": "\\.(gz|bz2|z|zip)$"
                        },
                        "monitor:///var/log/qbase": {
                          "disabled": "0",
                          "index": "quickbase-ppdidx",
                          "blacklist": "\\.(gz|bz2|z|zip)$"
                        }
                      }
                    }
                  }
                }
              },
              "/dev/shm/chef-attributes-qual.json": {
                "content": {
                  "splunk": {
                    "forwarder": {
                      "index": "quickbase-ppdidx",
                      "logs_to_index": {
                        "default": {
                          "_meta": { "Fn::Join": ["", ["aws_stack_name::", {"Ref": "AWS::StackName"} ]] }
                        },
                        "monitor:///opt/tomcat/logs": {
                          "disabled": "0",
                          "index": "quickbase-ppdidx",
                          "blacklist": "\\.(gz|bz2|z|zip)$"
                        },
                        "monitor:///var/log/qbase": {
                          "disabled": "0",
                          "index": "quickbase-ppdidx",
                          "blacklist": "\\.(gz|bz2|z|zip)$"
                        }
                      }
                    }
                  }
                }
              },
              "/dev/shm/chef-attributes-prod.json": {
                "content": {
                  "splunk": {
                    "forwarder": {
                      "index": "quickbase-prdidx",
                      "logs_to_index": {
                        "default": {
                          "_meta": { "Fn::Join": ["", ["aws_stack_name::", {"Ref": "AWS::StackName"} ]] }
                        },
                        "monitor:///opt/tomcat/logs": {
                          "disabled": "0",
                          "index": "quickbase-prdidx",
                          "blacklist": "\\.(gz|bz2|z|zip)$"
                        },
                        "monitor:///var/log/qbase": {
                          "disabled": "0",
                          "index": "quickbase-prdidx",
                          "blacklist": "\\.(gz|bz2|z|zip)$"
                        }
                      }
                    }
                  }
                }
              }
            },
            "commands": {
              "01_set_splunk_hostname": {
                "command": "/opt/splunkforwarder/bin/splunk set default-hostname $(hostname) -auth admin:changeme"
              },
              "02_run_chef": {
                "command": { "Fn::Join": ["",["chef-client -z -o splunkclouduf::configure -j /dev/shm/chef-attributes-", {"Ref": "paramEnvironment"}, ".json"]] },
                "cwd": "/tmp/chef-repo"
              },
              "03_status": {
                "command": "systemctl status splunk || true"
              },
              "04_enable_and_start_splunk": {
                "command": "systemctl enable splunk && systemctl start splunk"
              }
            }
          },
          "setup_environment_variable": {
            "commands": {
              "01_add_environment_to_etc_sysconfig_tomcat": {
                "command": { "Fn::Join": ["",["echo 'APP_ENV=\"", { "Ref": "paramEnvironment" }, "\"' >> /etc/sysconfig/tomcat"]] }
              }
            }
          },
          "get_secrets": {
            "commands": {
              "01_make_secrets_dir": {
                "command": "mkdir -p /dev/shm/secrets && chmod 750 /dev/shm/secrets && chgrp tomcat /dev/shm/secrets"
              },
              "02_get_common_local_properties": {
                "command": "/usr/local/bin/secrets get --kms-cmk-id alias/iss-qbase-secrets --output /dev/shm/secrets/webhook.local.properties --region $(cat /tmp/region) --s3-bucket $(cat /tmp/secrets-bucket) --secret-name webhooks/webhook.local.properties"
              },
              "03_set_permissions": {
                "command": "chmod 640 /dev/shm/secrets/webhook.local.properties && chgrp tomcat /dev/shm/secrets/webhook.local.properties"
              },
              "04_enable_and_start_tomcat": {
                "command": "systemctl enable tomcat && systemctl start tomcat"
              }
            }
          },
          "install_lc_handler": {
            "files": {
              "/usr/local/bin/lc-handler.py": {
                "content": { "Fn::Join": ["\n", [
                  "#!/usr/bin/env python",
                  "import boto3",
                  "from boto3.dynamodb.conditions import Key",
                  "import requests",
                  "my_region = requests.get('http://169.254.169.254/latest/meta-data/placement/availability-zone').text[:-1]",
                  "my_instance_id = requests.get('http://169.254.169.254/latest/meta-data/instance-id').text",
                  "dynamodb = boto3.resource('dynamodb',region_name=my_region)",
                  "table = dynamodb.Table('LifeCycleControl')",
                  "items = table.query(KeyConditionExpression=Key('InstanceID').eq(my_instance_id))['Items']",
                  "if(len(items) == 1):",
                  "  print('Activating Lifecycle Hook ...')",
                  "  table.delete_item(Key={'InstanceID': my_instance_id})",
                  "  import time",
                  "  time.sleep(120)",
                  "  print('Completing Lifecycle ...')",
                  "  asg_client = boto3.client('autoscaling',region_name=my_region)",
                  "  asg_client.complete_lifecycle_action(LifecycleHookName=items[0]['hook'],",
                  "                                       AutoScalingGroupName=items[0]['asg'],",
                  "                                       LifecycleActionToken=items[0]['token'],",
                  "                                       LifecycleActionResult='CONTINUE')"
                ]]},
                "mode": "000700",
                "owner": "root",
                "group": "root"
              },
              "/etc/cron.d/lc-handler": {
                "content": { "Fn::Join": ["\n", [
                  "* * * * * root /usr/local/bin/lc-handler.py",
                  ""
                ]]},
                "mode": "000644",
                "owner": "root",
                "group": "root"
              }
            }
          },
          "verify_instance_health": {
            "commands": {
              "ELBHealthCheck": {
                "command": { "Fn::Join": ["", [
                  "until [ \"$state\" == \"\\\"InService\\\"\" ]; do ",
                  "  state=$(aws --region $(cat /tmp/region) elb describe-instance-health ",
                  "              --load-balancer-name ", { "Ref": "ElasticLoadBalancer" },
                  "              --instances $(cat /tmp/instance-id) ",
                  "              --query InstanceStates[0].State); ",
                  "  sleep 10; ",
                  "done"
                ]]}
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId": {"Ref": "paramEC2ImageAMI"},
        "InstanceType": {"Ref": "paramInstanceType"},
        "SecurityGroups": [{"Ref": "InstanceSecurityGroup"}, {"Ref": "paramInternetAccessSecurityGroupID"}],
        "KeyName": {"Ref": "KeyName"},
        "IamInstanceProfile": {"Ref": "InstanceProfile"},
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#cloud-config\n",
                "bootcmd:\n",
                " - curl \"http://169.254.169.254/latest/meta-data/instance-id\" -o /tmp/instance-id\n",
                " - echo \"", {"Ref": "AWS::StackName"}, "\" > /tmp/stack-name\n",
                " - echo \"", {"Ref": "AWS::Region"}, "\" > /tmp/region\n",
                " - echo \"iss-", {"Ref": "AWS::AccountId"}, "-", {"Ref": "AWS::Region"}, "\" > /tmp/secrets-bucket\n",
                " - systemctl stop splunk; systemctl disable splunk\n",
                "runcmd:\n",
                " - cfn-init -v -s $(cat /tmp/stack-name) -r LaunchConfig --region $(cat /tmp/region); cfn-signal -e $? --stack $(cat /tmp/stack-name) --resource AutoScalingGroup --region $(cat /tmp/region)\n"
              ]
            ]
          }
        }
      }
    },
    "Route53Alias": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "AliasTarget": {
          "HostedZoneId": { "Fn::GetAtt": ["ElasticLoadBalancer", "CanonicalHostedZoneNameID"] },
          "DNSName": { "Fn::GetAtt": ["ElasticLoadBalancer", "DNSName"] }
        },
        "HostedZoneName": { "Fn::Join": ["", [{ "Ref": "paramDomainName" }, "."]] },
        "Name": { "Fn::Join": ["", [{ "Ref": "AWS::StackName" }, "-" , {"Ref": "paramServiceName"}, "-", {"Ref": "paramEnvironment"}, "." , { "Ref": "paramDomainName" }, "."]] },
        "Type": "A"
      }
    }
  }
}
