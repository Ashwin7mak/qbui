@import '../../assets/css/qbVariables';
@import '../fields/fields';

$edit-field-padding: 5px;

.formContainer {
    display: flex;
    min-width: 100%;
    @include small-breakpoint {
        display: block;
    }

    .formStage {
        position: sticky;
        position: -webkit-sticky;
        top: 0;
        z-index: 999;
        background: $panel-background-color;
        border-bottom: 1px solid $panel-border-color;
    }
    .form {
        padding: 10px;
    }

    .formFooter {
        display: flex;
        flex-wrap: wrap;
        margin: 5px 0 15px 1px;
        font-size: $font-size-small;

        .fieldNormalText {
            color: $color-black-600;
            display: inline;
            white-space: nowrap;
            margin-right: 10px;
        }

        .fieldLinkText {
            font-weight: bold;
        }

        .div {
            display: inline;
        }

        .userInFooter .userDisplayValue {
            display: inline;
            margin-right: 10px;
        }
        .userInFooter .fieldNormalText {
            margin-right: 0px;
        }
    }

    .formSection {
        display: block;

        &.noWrapLabels .formElement.fieldLabel {
            white-space: normal;
        }

        .formTable {
            display: flex;
            margin-bottom: 20px;

            /* Fields in cardview span the width of the small device */

            @include small-breakpoint {
                width: 100%;
                table-layout: fixed;
                flex-direction: column;
            }

            .sectionColumn {
                flex: 0 auto;
            }
        }

        .qbPanelHeader {
            padding: 15px 0 15px 40px;

            .qbPanelHeaderIcon {
                top: 4px;
            }
        }

        &.closed {
            .qbPanelHeader {
                // if the section doesnt have a header, when its collapsed the height should be same as others
                min-height: 54px;
            }
        }

        &.nonCollapsible {
            .qbPanelHeaderIcon {
                display: none;
            }
        }

        .sectionColumn {
            display: flex;
            flex-direction: column;
            flex-wrap: nowrap;

            .formElementContainer {
                flex: 1 1 auto;
                //padding-top: 5px;
            }

            .formElementContainer .reportDetail {
                color: $field-label-normal-color;
                font-weight: bold;
                padding-bottom: 10px;
            }

            @include small-breakpoint {
                flex-wrap: wrap;

                .formElementContainer {
                    flex-grow: 1;
                    margin-right: 15px;
                    padding-bottom: 0;
                    //padding-top: 10px;
                }

                .phoneWrapper {
                    width: 100%;
                }
            }


            .formElement {
                word-wrap: break-word;
                display: flex;
                flex-direction: column;
            }

            /* separate field label td left of field */
            .fieldLabel {
                text-align: right;
                display: block;
                color: $field-label-normal-color;
                font-weight: bold;

                span {
                    display: inline-block;
                    vertical-align: top;
                }

                .requiredFlag-layout {
                    padding-right: 2px;
                }
            }

            /* field label in field td */
            .field .fieldLabel {
                text-align: left;
                margin-bottom: $edit-field-padding;
            }

            .field {

                .dateCell {
                    white-space: nowrap;
                }
            }

            .formElementContainer:last-child .field {
                margin-right: 0;
            }
        }

        .errorText {
            color: $tootip-error-color !important;
        }
    }

    .editForm {
        @include correctFontWeightForLightTextOnDarkBackground;

        .fieldLabel {
            margin-top: $edit-field-padding;
            max-width: $form-edit-input-width;
        }

        .field .fieldLabel {
            margin-top: 0;
        }

        .formElement.field .viewElement {
            padding: $edit-field-padding;
        }

        .fieldValueEditor {
            width: $form-edit-input-width;

            &.fieldInputWidth {
                width: inherit;

                .input {
                    width: inherit;
                }
            }

            .checkbox {
                top: $edit-field-padding;
            }

            .errorDiv {
                display: flex;
                flex-direction: column;
            }

            /** Error border for dateTime needs this specificity to show up on forms */
            .dateCell.error {
                @include error-border;

                .input-group.date {
                    border: none;
                }
            }

        }

        .input, textarea.cellEdit {
            padding: $edit-field-padding;
        }

        .input, .select {
            width: 100%;
        }
        /* don't bleed through dropdowns */
        .input-group .form-control {
            z-index: inherit;
        }

        .cellEdit.dateTimeField {
            width: calc(50% - 1px);
            vertical-align: middle;

            //  dateCell styles for date/time combo
            &.dateCell {
                margin-right: 2px;
            }

            //  timeCell styles for date/time combo
            &.timeCell {
                .Select-value {
                    padding-right: 20px !important;
                }
            }
        }

        .cellEdit.timeCell {
            .Select, .Select-control, .Select-input {
                height: 30px;
            }

            .Select-value, .Select-placeholder {
                line-height: 30px;
            }
        }

        .dateCell.cellEdit > * {
            .input-group.date input.form-control {
                height: 30px;
            }
        }
        /* Dont want to form section to get a scroll bar when the react select menu expands so remove the position absolute -
     this automatically adds height to the section container */
        .Select-menu-outer {
            top: auto !important;
            margin-bottom: 10px;
        }
    }

    .viewForm {
        @include correctFontWeightForLightTextOnDarkBackground;
    }

    /* For mobile phones: */
    @include small-breakpoint {
        .formSection {
            display: block;

            .qbPanelHeader {
                padding: 10px 0 20px 40px;
            }

            .sectionBody {
                margin-left: 0;
                width: 100%;
            }

            .fieldRow {
                .formElementWrapper {
                    padding-bottom: 20px;
                }

                .field {
                    max-width: 100%;
                }
            }

            .fieldLabel {
                font-size: $font-size-small;
                margin-bottom: 0;
            }

            .fieldValue {
                font-size: $font-size-small;
            }

            .fieldValueEditor, textarea.cellEdit {
                width: 100%;
            }

            .errorText {
                font-size: $font-size-small;
            }

            .fieldValueEditor {
                &.fieldInputWidth {
                    width: 100%;

                    .input {
                        width: 100%;
                    }
                }
            }
        }
        .viewForm {
            .cellWrapper, .viewElement, .data {
                font-size: 16px;
            }
            .field .fieldLabel {
                font-size: 14px;
            }
        }
    }

    .tooltip {
        z-index: 1;
    }

    /**
     * on forms, we want the form to expand vertically to accomodate the datepicker
     * when it's open (like react-select based components), so make it use relative positioning,
     * not absolute, and have the parent of the datepicker and input box be a flexbox so we can
     * reorder the datepicker AFTER the input using only CSS
     */
    .formElement .fieldValueEditor .dateCell {
        border: 0;

        > div {
            display: flex;
            flex-direction: column;

            .input-group.date {
                border: 1px solid $color-black-400;
                border-radius: 2px;
            }

            .bootstrap-datetimepicker-widget {
                order: 2;
                margin-bottom: 10px;
            }
        }
    }
}
