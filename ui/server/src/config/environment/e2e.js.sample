
// E2E Test configuration
// ===========================

(function() {
    'use strict';

    // Use e2e.js for environment variables that grunt will set when the server starts when running e2e tests.
    // The e2e.js should not be tracked by git.

    //var path = require('path');
    var dateUtils = require('../../utility/dateUtils');
    var envConsts = require('./environmentConstants');
    var routeGroups = require('../../routes/routeGroups');
    var clientConsts = require('./clientConsts');

    var client = clientConsts.REACT;

    var baseConfig = {

        //  Logging configuration
        LOG: {
            name: 'qbse-local',
            level: 'debug',
            stream: {
                type: 'console',         //  file or console
                file: {
                    dir: './logs',
                    name: 'qbse-local-' + dateUtils.formatDate(new Date(), '%Y-%M-%D-%h.%m.%s') + '.log'
                }
            },
            showBody: false,        // include req/res body in log...caution in prod as customer sensitive data could get exposed
            src: false              // this is slow...do not use in prod
        },

        // to run using ssl, copy the private key and cert for
        // your host(ie:localhost.intuit.com) to ../server/src/config/keys
        // folder.. comment this out if don't want to offer ssl support.

        //SSL_KEY: {
        //    private: path.normalize(__dirname + '/keys/private.pem'),
        //    cert: path.normalize(__dirname + '/keys/cert.pem'),
        //    requireCert: false  // set to false for self signed certs
        //},

        // allow for override of default ports
        port: 9001,
        sslPort: 9443,

        ip : 'localhost', // replace with your host or machine name user use (that is in your hosts file i.e.'CMBL13XXXXXX' for mobile testing)

        // Use these settings if running Java Core and EE through Docker-compose in qbui
        //Java REST endpoint (protocol,server,port)
        javaHost: 'https://localhost:8298',
        eeHost: 'https://localhost:8299',
        automationHost: 'https://localhost:8089',

        // Use these settings if running Java Core and EE locally
        //Java REST endpoint (protocol,server,port)
        // javaHost: 'http://localhost:8080',
        // eeHost: 'http://localhost:8081',
        // automationHost: 'http://localhost:8089',

        // Use these settings if you want to connect your qbui code to the INT1 integration environment
        // javaHost: 'https://localhost.int1-ecs.newstack.quickbaserocks.com',
        // eeHost: 'https://t.int1-ecs.newstack.quickbaserocks.com',
        // automationHost: 'https://localhost.int1-ecs.newstack.quickbaserocks.com',

        eeHostEnable: true,

        isMockServer : false,

        //Express Server
        //DOMAIN: 'https://localhost:9443',
        DOMAIN: 'http://localhost:9001',

        //  legacy quickbase host
        legacyBase: '',

        //Node understanding of RuntimeEnvironment
        env: envConsts.LOCAL,

        //Custom realm to use in dataGen scripts (needs to exist first! use swagger to create)
        //realmToUse: 'testrealm',

        //enable to track performance stats to server/splunk
        isClientPerfTrackingEnabled: true,

        //set false if you don't want growl notifications on webpack / watch updates
        growlNotify: true,

        //Node's understanding of a grouping of routes to be enabled/disabled
        routeGroup: routeGroups.DEBUG,

        //set notHotLoad true to disable hotloading
        noHotLoad : true,

        // the client to use
        client : client,

        /**
         * Scripts for Wistia video popover
         * They load script from a video hosting service called Wistia and allow the walk-through video to load as a popover
         */
        wistiaScriptPart1: '',
        wistiaScriptPart2: '',


        /**
         * Override master.featureSwitches by overriding specific features in
         * e2e.override.featureSwitches.json.
         * Note: FeatureSwitches are overridden based on their names, ensure overrides
         * have same name including spacing.
         */
        // featureSwitchConfigOverride: '../../config/environment/featureSwitch/e2e.override.featureSwitches.json',
        // masterOverrideTurnFeaturesOn:false,


        /**
         * AWS api gateway to lambda functions for feature switches
         */
        //awsHost: "https://lwbv23m3xk.execute-api.us-west-2.amazonaws.com,

        // A shared secret for hitting private APIs on Core. Used for running dataGen and E2E tests locally
        sharedSecret: 'e4d1d39f-3352-474e-83bb-74dda6c4d8d7', // This value is not valid outside of internal dev environments
    };

    module.exports = Object.assign({}, baseConfig, process.env);
}());
