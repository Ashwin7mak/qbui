@import '../../assets/css/qbVariables';

.formBuilderContainer {
    // When using the touch-backend, the user-select: none property turns off text selection while dragging.
    // Our auto-prefixer doesn't appear to support this one so added prefixes for user-select manually.
    -moz-user-select: -moz-none;
    -ms-user-select: none;
    -webkit-user-select: none;
    user-select: none;

    .draggableField {
        /* When in builder mode we need to push out the
        left padding to make room for the editing tools */
        margin-left: $spacing-tiny;
        &:active {
            .formElement.fieldLabel {
                //need to add a zindex of 1 to show the field label during an active state
                z-index: 3;
            }
        }
    }

    .draggableField, .droppableField {
        position: relative;
    }

    .notDragging {
        max-height: 500px;
        opacity: 1;

        transition: opacity 0.5s, max-height 0.5s;
    }

    /*
     * In order to show hover and drop effects over existing, but unknown elements, we place a transparent
     * element over each form element. These are then transitioned based on opacity. Note that dragging elements have
     * a div appended BEFORE and droppable targets are appended AFTER. This prevents the droppable target from blocking
     * the draggable one.
     */
    .draggableField:before, .droppableField:before {
        content: "";
        position: absolute;
        width: 110%;
        height: 120%;
        top: -10%;
        left: -5%;
    }

    // Dragging
    .notDragging:before {
        opacity: 0;
        transition: opacity 0.2s;
    }

    .notDragging:hover:after {
        opacity: 0.5;

        transition: opacity 0.2s;
    }

    .notDragging:active:after {
        opacity: 0;
    }

    .dragging {
        opacity: 0.5;
        transition: opacity 0.5s, max-height 0.5s;
    }

    .dragging:after {
        content: none;
    }

    // React CSS Transition Classes for elements that are moved
    .formItem-enter {
        opacity: 0.01;
    }

    .formItem-enter.formItem-enter-active {
        opacity: 1;
        transition: opacity 1s;
    }

    .formItem-leave {
        opacity: 1;
    }

    .formItem-leave.formItem-leave-active {
        opacity: 0.01;
        transition: opacity 1s;
    }

    @include medium-breakpoint {
        .dragAndDropField {
            max-width: $form-edit-input-width;
        }
    }

    @include large-breakpoint {
        .dragAndDropField {
            max-width: $form-edit-input-width;
        }
    }
    .dropHovering .mobileDropTarget {
        opacity: 1;
        height: 30px;

        transition: opacity 0.5s, height 0.2s;
    }

    .mobileDropTarget {
        opacity: 0;
        width: $form-edit-input-width;
        height: 15px;
        display: flex;
        justify-content: center;
        align-items: center;

        .mobileDropTargetVisibleLine {
            height: 3px;
            background-color: $color-green-600;
            flex: 1 auto;
        }
    }
}
